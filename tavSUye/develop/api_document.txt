API Documentation

Session Information:
The following attributes are stored in the session:
- userId: The unique identifier of the logged-in user.
- username: The username of the logged-in user.
- role: The role of the logged-in user (e.g., ADMIN, USER).
- emailVerified: A boolean indicating whether the user's email is verified.

---

Controller: AuthController 1-7

1. User Registration
- Session-Based: No
- Method + Link: POST /api/auth/register
- Input:
  - firstName: The first name of the user.
  - lastName: The last name of the user.
  - username: The username of the user.
  - email: The email address of the user (must be a valid Sabancı University email).
  - password: The password for the user account.
  {
      "firstName": "John",
      "lastName": "Doe",
      "username": "john_doe",
      "email": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 201 Created: "User registered successfully. Please verify your email."
  - HTTP 403 Forbidden: "Only Sabancı University email addresses are allowed."
  - HTTP 409 Conflict:
    - "Email is already registered."
    - "Username is already taken."
    - "User already exists. Please verify your email."

2. Email Verification
- Session-Based: No
- Method + Link: POST /api/auth/verify-email
- Input:
  - email: The email address of the user.
  - verificationCode: The verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK: "Email successfully verified."
  - HTTP 400 Bad Request: "Invalid or expired verification code."

3. User Login
- Session-Based: No (Creates a session)
- Method + Link: POST /api/auth/login
- Input:
  - usernameOrEmail: The username or email address of the user.
  - password: The password for the user account.
  {
      "usernameOrEmail": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
  OR 
  {
      "usernameOrEmail": "john_doe",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "Login successful.",
        "requires2FA": false,
        "role": "USER"
    }
    - HTTP 202 Accepted:
    {
        "message": "2FA verification required. A code has been sent to your email.",
        "requires2FA": true,
        "role": "USER"
    }
  - HTTP 401 Unauthorized:
    {
        "message": "Invalid credentials.",
        "requires2FA": false,
        "role": null
    }
  - HTTP 403 Forbidden:
    - "Your account has been banned. Contact support."
    - "Account is suspended. Please verify your email to reactivate."

4. Two-Factor Authentication Verification
- Session-Based: No (Creates a session upon successful verification)
- Method + Link: POST /api/auth/verify-2fa
- Input:
  - email: The email address of the user.
  - verificationCode: The 2FA verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "2FA verification successful. You are now logged in.",
        "requires2FA": false,
        "role": "USER"
    }
  - HTTP 400 Bad Request:
    {
        "message": "Invalid or expired 2FA verification code.",
        "requires2FA": false,
        "role": null
    }

5. User Logout
- Session-Based: Yes
- Method + Link: POST /api/auth/logout
- Input: None
- Expected Outputs:
  - HTTP 200 OK: "Logged out successfully."
  - HTTP 403 Forbidden

6. Forgot Password
- Session-Based: No
- Method + Link: POST /api/auth/forgot-password
- Input:
  - email: The email address of the user.
  {
      "email": "john.doe@sabanciuniv.edu"
  }
- Expected Outputs:
  - HTTP 200 OK: "Password reset email sent successfully."
  - HTTP 400 Bad Request: "Email not found."
  - HTTP 400 Bad Request: "A password reset code has already been sent. Please wait until the current code expires."

7. Reset Password
- Session-Based: No
- Method + Link: POST /api/auth/reset-password
- Input:
  - code: The password reset code sent to the user's email.
  - newPassword: The new password for the user account.
  {
    "email": "user@sabanciuniv.edu",
    "code": "123456",
    "newPassword": "newSecurePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK: "Password reset successfully."
  - HTTP 400 Bad Request: "Invalid or expired password reset code."

---

Notes:
- Session-Based APIs: APIs that require a valid session will return a 401 Unauthorized response if the user is not logged in.
- Error Handling: All APIs return appropriate error messages for invalid inputs or unauthorized access.
- Session Management: The session is created during login or 2FA verification and destroyed during logout.

Controller: CourseController 8-12

8. Get All Subjects
- Session-Based: Yes
- Method + Link: GET /api/courses/subjects
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    [
        "CS",
        "MATH",
        "PHYS"
    ]
  - HTTP 403 Forbidden

9. Get All Course Codes by Subject
- Session-Based: Yes
- Method + Link: GET /api/courses/{subject}/codes
- Input:
  - subject: The subject for which course codes are requested (e.g., "CS").
  {
      "subject": "CS"
  }
- Expected Outputs:
  - HTTP 200 OK:
    [
        "101",
        "102",
        "201"
    ]
  - HTTP 403 Forbidden

10. Get Course Details by Subject and Course Code
- Session-Based: Yes
- Method + Link: GET /api/courses/{subject}-{courseCode}
- Input:
  - subject: The subject of the course (e.g., "CS").
  - courseCode: The course code (e.g., "101").
- Expected Outputs:
  - HTTP 200 OK:
    {
        "courseId": 1,
        "subject": "CS",
        "courseCode": "101",
        "courseNameEn": "Introduction to Computer Science",
        "courseNameTr": "Bilgisayar Bilimine Giriş",
        "suCredit": 3,
        "ectsCredit": 6,
        "engineeringEcts": 3,
        "basicScienceEcts": 0,
        "contentEn": "This course introduces the basics of computer science.",
        "contentTr": "Bu ders bilgisayar biliminin temellerini tanıtır.",
        "linkEn": "http://example.com/cs101",
        "linkTr": "http://example.com/cs101-tr",
        "faculty": "Engineering",
        "courseStatus": true
    }
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found"

11. Add a New Course (Admin Only)
- Session-Based: Yes
- Method + Link: POST /api/courses/add
- Input:
  {
      "subject": "CS",
      "courseCode": "103",
      "courseNameEn": "Data Structures",
      "courseNameTr": "Veri Yapıları",
      "suCredit": 3,
      "ectsCredit": 6,
      "engineeringEcts": 3,
      "basicScienceEcts": 0,
      "contentEn": "This course covers data structures.",
      "contentTr": "Bu ders veri yapılarını kapsar.",
      "linkEn": "http://example.com/cs103",
      "linkTr": "http://example.com/cs103-tr",
      "faculty": "Engineering",
      "courseStatus": true
  }
- Expected Outputs:
  - HTTP 200 OK: "Course added successfully."
  - HTTP 400 Bad Request
  - HTTP 403 Forbidden: "You are not authorized to add a course." (NOT ADMIN)
  - HTTP 403 Forbidden

12. Update a Course (Admin Only)
- Session-Based: Yes
- Method + Link: PUT /api/courses/{courseId}
- Input:
  - courseId: The ID of the course to be updated.
  {
      "subject": "CS",
      "courseCode": "103",
      "courseNameEn": "Advanced Data Structures",
      "courseNameTr": "İleri Veri Yapıları",
      "suCredit": 4,
      "ectsCredit": 7,
      "engineeringEcts": 4,
      "basicScienceEcts": 0,
      "contentEn": "This course covers advanced data structures.",
      "contentTr": "Bu ders ileri veri yapılarını kapsar.",
      "linkEn": "http://example.com/cs103-advanced",
      "linkTr": "http://example.com/cs103-advanced-tr",
      "faculty": "Engineering",
      "courseStatus": true
  }
- Expected Outputs:
  - HTTP 200 OK: "Course updated successfully."
  - HTTP 403 Forbidden: "You are not authorized to update a course." (NOT ADMIN)
  - HTTP 404 Not Found: "Course not found with ID: {courseId}"
  - HTTP 403 Forbidden

---

Controller: CourseCommentController 13-16

13. Get All Comments for a Course
- Session-Based: Yes
- Method + Link: GET /api/course-comments/{courseId}
- Input:
  - courseId: The ID of the course for which comments are requested.
- Expected Outputs:
  - HTTP 200 OK:
    [
        {
            "commentId": 1,
            "userId": 9,
            "username": "erdemozcan",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": 202401,
            "gradeReceived": "A",
            "content": "This course is amazing!",
            "createdAt": "2025-05-14T16:16:03",
            "anonymous": false
        },
        {
            "commentId": 2,
            "userId": 9,
            "username": "erdemozcan",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "I agree!",
            "createdAt": "2025-05-14T16:21:01",
            "anonymous": false
        },
        {
            "commentId": 3,
            "userId": null,
            "username": null,
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "çok gizli mesaj",
            "createdAt": "2025-05-14T17:12:07",
            "anonymous": true
        },
        {
            "commentId": 4,
            "userId": 11,
            "username": "berkb",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "çok gizli mesaj 2",
            "createdAt": "2025-05-14T17:16:38",
            "anonymous": true
        }
    ]
  - HTTP 403 Forbidden
  - NOTE, IF NOT COURSEID NOT FOUND, RETURN EMPTY.

14. Add a Comment to a Course
- Session-Based: Yes
- Method + Link: POST /api/course-comments/{courseId}
- Input:
  - courseId: The ID of the course to which the comment will be added.
  ```json
  {
      "content": "This course is amazing!",
      "anonymous": false,
      "termTaken": 202401,
      "gradeReceived": "A",
      "parentCommentId": null
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment added successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found."

15. Update a Comment
- Session-Based: Yes
- Method + Link: PUT /api/course-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be updated.
  {
      "content": "This course is fantastic!",
      "anonymous": true,
      "termTaken": 202401,
      "gradeReceived": "A-"
  }
- Expected Outputs:
  - HTTP 200 OK: "Comment updated successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to update this comment."
  - HTTP 404 Not Found: "Comment not found."

16. Delete a Comment (Admin or Comment Owner Only)
- Session-Based: Yes
- Method + Link: DELETE /api/course-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be deleted.
- Expected Outputs:
  - HTTP 200 OK: "Comment deleted successfully."
  - HTTP 401 Unauthorized: "You must be logged in to delete a comment."
  - HTTP 403 Forbidden: "You are not authorized to delete this comment."
  - HTTP 404 Not Found: "Comment not found."

---

Controller: CourseCommentRatingController 17-20

17. Rate a Comment (Like or Dislike)
- Session-Based: Yes
- Method + Link: POST /api/course-comment-ratings/{commentId}/rate
- Input:
  - commentId: The ID of the comment to be rated.
  - isLike: A boolean indicating whether the comment is liked (`true`) or disliked (`false`).
  ```json
  {
      "isLike": true
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment rated successfully."
  - HTTP 401 Unauthorized: "You must be logged in to rate a comment."
  - HTTP 404 Not Found: "Comment not found."

18. Get Comment Rating (Like/Dislike Status)
- Session-Based: Yes
- Method + Link: GET /api/course-comment-ratings/{commentId}
- Input:
  - commentId: The ID of the comment for which the rating status is requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "commentId": 1,
        "isLiked": true,
        "isDisliked": false
    }
    ```
  - HTTP 401 Unauthorized: "Unauthorized"
  - HTTP 404 Not Found: "Comment not found"

19. Get All Ratings for a Comment
- Session-Based: Yes
- Method + Link: GET /api/course-comment-ratings/{commentId}/all
- Input:
  - commentId: The ID of the comment for which all ratings are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "commentId": 1,
        "ratings": [
            {
                "userId": 1,
                "username": "john_doe",
                "isLiked": true,
                "isDisliked": false
            },
            {
                "userId": 2,
                "username": "jane_doe",
                "isLiked": false,
                "isDisliked": true
            }
        ]
    }
    ```
  - HTTP 401 Unauthorized: "Unauthorized"
  - HTTP 404 Not Found: "Comment not found"

20. Delete a Rating (Like or Dislike)
- Session-Based: Yes
- Method + Link: DELETE /api/course-comment-ratings/{commentId}/delete
- Input:
  - commentId: The ID of the comment for which the rating will be deleted.
- Expected Outputs:
  - HTTP 200 OK: "Rating deleted successfully."
  - HTTP 401 Unauthorized: "You must be logged in to delete a rating."
  - HTTP 404 Not Found: "Comment not found."

---

Controller: CourseViewLogController 21-22

21. Log a Course Visit
- Session-Based: Yes
- Method + Link: POST /api/course-view-log/log
- Input:
  - courseId: The ID of the course being visited.
  ```json
  {
      "courseId": 101
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Course visit logged successfully."
  - HTTP 401 Unauthorized: "You must be logged in to log a course visit."
  - HTTP 404 Not Found: "Course not found."

22. Get Course Visit Log
- Session-Based: Yes
- Method + Link: GET /api/course-view-log
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "courseId": 101,
            "visitedAt": "2025-05-12T10:00:00"
        },
        {
            "courseId": 102,
            "visitedAt": "2025-05-11T15:30:00"
        }
    ]
    ```
  - HTTP 401 Unauthorized: "Unauthorized"

---

Controller:

