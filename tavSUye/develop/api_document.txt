API Documentation

Session Information:
The following attributes are stored in the session:
- userId: The unique identifier of the logged-in user.
- username: The username of the logged-in user.
- role: The role of the logged-in user (e.g., ADMIN, USER).
- emailVerified: A boolean indicating whether the user's email is verified.

---

Controller: AuthController

1. User Registration
- Session-Based: No
- Method + Link: POST /api/auth/register
- Input:
  - firstName: The first name of the user.
  - lastName: The last name of the user.
  - username: The username of the user.
  - email: The email address of the user (must be a valid Sabancı University email).
  - password: The password for the user account.
  {
      "firstName": "John",
      "lastName": "Doe",
      "username": "john_doe",
      "email": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK: "User registered successfully. Please verify your email."
  - HTTP 400 Bad Request:
    - "Only Sabancı University email addresses are allowed."
    - "Email is already registered."
    - "Username is already taken."
    - "User already exists. Please verify your email."

2. User Login
- Session-Based: No (Creates a session)
- Method + Link: POST /api/auth/login
- Input:
  - usernameOrEmail: The username or email address of the user.
  - password: The password for the user account.
  {
      "usernameOrEmail": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
  OR 
  {
      "usernameOrEmail": "john_doe",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "Login successful.",
        "requires2FA": false,
        "role": "USER"
    }
    - HTTP 202 Accepted:
    {
        "message": "2FA verification required. A code has been sent to your email.",
        "requires2FA": true,
        "role": "USER"
    }
  - HTTP 401 Unauthorized:
    {
        "message": "Invalid credentials.",
        "requires2FA": false,
        "role": null
    }
  - HTTP 403 Forbidden:
    - "Your account has been banned. Contact support."
    - "Email not verified. Please verify your email."
    - "Account is suspended. Please verify your email to reactivate."

3. Two-Factor Authentication Verification
- Session-Based: No (Creates a session upon successful verification)
- Method + Link: POST /api/auth/verify-2fa
- Input:
  - email: The email address of the user.
  - verificationCode: The 2FA verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "2FA verification successful. You are now logged in.",
        "requires2FA": false,
        "role": "USER"
    }
  - HTTP 400 Bad Request:
    {
        "message": "Invalid or expired 2FA verification code.",
        "requires2FA": false,
        "role": null
    }

4. User Logout
- Session-Based: Yes
- Method + Link: POST /api/auth/logout
- Input: None
- Expected Outputs:
  - HTTP 200 OK: "Logged out successfully."
  - HTTP 401 Unauthorized: "You are not logged in."

5. Email Verification
- Session-Based: No
- Method + Link: POST /api/auth/verify-email
- Input:
  - email: The email address of the user.
  - verificationCode: The verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK: "Email successfully verified."
  - HTTP 400 Bad Request: "Invalid or expired verification code."

6. Forgot Password
- Session-Based: No
- Method + Link: POST /api/auth/forgot-password
- Input:
  - email: The email address of the user.
- Expected Outputs:
  - HTTP 200 OK: "Password reset email sent successfully."
  - HTTP 400 Bad Request: "Email not found."

7. Reset Password
- Session-Based: No
- Method + Link: POST /api/auth/reset-password
- Input:
  - token: The password reset token sent to the user's email.
  - newPassword: The new password for the user account.
- Expected Outputs:
  - HTTP 200 OK: "Password reset successfully."
  - HTTP 400 Bad Request: "Invalid or expired reset token."

---

Notes:
- Session-Based APIs: APIs that require a valid session will return a 401 Unauthorized response if the user is not logged in.
- Error Handling: All APIs return appropriate error messages for invalid inputs or unauthorized access.
- Session Management: The session is created during login or 2FA verification and destroyed during logout.

