API Documentation

Session Information:
The following attributes are stored in the session:
- userId: The unique identifier of the logged-in user.
- username: The username of the logged-in user.
- role: The role of the logged-in user (e.g., ADMIN, USER).
- emailVerified: A boolean indicating whether the user's email is verified.

---

Controller: AuthController 1-7

1. User Registration
- Session-Based: No
- Method + Link: POST /api/auth/register
- Input:
  - firstName: The first name of the user.
  - lastName: The last name of the user.
  - username: The username of the user.
  - email: The email address of the user (must be a valid Sabancı University email).
  - password: The password for the user account.
  {
      "firstName": "John",
      "lastName": "Doe",
      "username": "john_doe",
      "email": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 201 Created: "User registered successfully. Please verify your email."
  - HTTP 403 Forbidden: "Only Sabancı University email addresses are allowed."
  - HTTP 409 Conflict:
    - "Email is already registered."
    - "Username is already taken."
    - "User already exists. Please verify your email."

2. Email Verification
- Session-Based: No
- Method + Link: POST /api/auth/verify-email
- Input:
  - email: The email address of the user.
  - verificationCode: The verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK: "Email successfully verified."
  - HTTP 400 Bad Request: "Invalid or expired verification code."

3. User Login
- Session-Based: No (Creates a session)
- Method + Link: POST /api/auth/login
- Input:
  - usernameOrEmail: The username or email address of the user.
  - password: The password for the user account.
  {
      "usernameOrEmail": "john.doe@sabanciuniv.edu",
      "password": "securePassword123"
  }
  OR 
  {
      "usernameOrEmail": "john_doe",
      "password": "securePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "Login successful.",
        "requires2FA": false,
        "role": "USER"
    }
    - HTTP 202 Accepted:
    {
        "message": "2FA verification required. A code has been sent to your email.",
        "requires2FA": true,
        "role": "USER"
    }
  - HTTP 401 Unauthorized:
    {
        "message": "Invalid credentials.",
        "requires2FA": false,
        "role": null
    }
  - HTTP 403 Forbidden:
    - "Your account has been banned. Contact support."
    - "Account is suspended. Please verify your email to reactivate."

4. Two-Factor Authentication Verification
- Session-Based: No (Creates a session upon successful verification)
- Method + Link: POST /api/auth/verify-2fa
- Input:
  - email: The email address of the user.
  - verificationCode: The 2FA verification code sent to the user's email.
  {
      "email": "john.doe@sabanciuniv.edu",
      "verificationCode": "123456"
  }
- Expected Outputs:
  - HTTP 200 OK:
    {
        "message": "2FA verification successful. You are now logged in.",
        "requires2FA": false,
        "role": "USER"
    }
  - HTTP 400 Bad Request:
    {
        "message": "Invalid or expired 2FA verification code.",
        "requires2FA": false,
        "role": null
    }

5. User Logout
- Session-Based: Yes
- Method + Link: POST /api/auth/logout
- Input: None
- Expected Outputs:
  - HTTP 200 OK: "Logged out successfully."
  - HTTP 403 Forbidden

6. Forgot Password
- Session-Based: No
- Method + Link: POST /api/auth/forgot-password
- Input:
  - email: The email address of the user.
  {
      "email": "john.doe@sabanciuniv.edu"
  }
- Expected Outputs:
  - HTTP 200 OK: "Password reset email sent successfully."
  - HTTP 400 Bad Request: "Email not found."
  - HTTP 400 Bad Request: "A password reset code has already been sent. Please wait until the current code expires."

7. Reset Password
- Session-Based: No
- Method + Link: POST /api/auth/reset-password
- Input:
  - email: The email address of the user.
  - code: The password reset code sent to the user's email.
  - newPassword: The new password for the user account.
  {
    "email": "user@sabanciuniv.edu",
    "code": "123456",
    "newPassword": "newSecurePassword123"
  }
- Expected Outputs:
  - HTTP 200 OK: "Password reset successfully."
  - HTTP 400 Bad Request: "Invalid or expired password reset code."

---

Notes:
- Session-Based APIs: APIs that require a valid session will return a 401 Unauthorized response if the user is not logged in.
- Error Handling: All APIs return appropriate error messages for invalid inputs or unauthorized access.
- Session Management: The session is created during login or 2FA verification and destroyed during logout.

Controller: CourseController 8-12

8. Get All Subjects
- Session-Based: Yes
- Method + Link: GET /api/courses/subjects
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    [
        "CS",
        "MATH",
        "PHYS"
    ]
  - HTTP 403 Forbidden

9. Get All Course Codes by Subject
- Session-Based: Yes
- Method + Link: GET /api/courses/{subject}/codes
- Input:
  - subject: The subject for which course codes are requested (e.g., "CS").
  {
      "subject": "CS"
  }
- Expected Outputs:
  - HTTP 200 OK:
    [
        "101",
        "102",
        "201"
    ]
  - HTTP 403 Forbidden

10. Get Course Details by Subject and Course Code
- Session-Based: Yes
- Method + Link: GET /api/courses/{subject}-{courseCode}
- Input:
  - subject: The subject of the course (e.g., "CS").
  - courseCode: The course code (e.g., "101").
- Expected Outputs:
  - HTTP 200 OK:
    {
        "courseId": 1,
        "subject": "CS",
        "courseCode": "101",
        "courseNameEn": "Introduction to Computer Science",
        "courseNameTr": "Bilgisayar Bilimine Giriş",
        "suCredit": 3,
        "ectsCredit": 6,
        "engineeringEcts": 3,
        "basicScienceEcts": 0,
        "contentEn": "This course introduces the basics of computer science.",
        "contentTr": "Bu ders bilgisayar biliminin temellerini tanıtır.",
        "linkEn": "http://example.com/cs101",
        "linkTr": "http://example.com/cs101-tr",
        "faculty": "Engineering",
        "courseStatus": true
    }
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found"

11. Add a New Course (Admin Only)
- Session-Based: Yes
- Method + Link: POST /api/courses/add
- Input:
  {
      "subject": "CS",
      "courseCode": "103",
      "courseNameEn": "Data Structures",
      "courseNameTr": "Veri Yapıları",
      "suCredit": 3,
      "ectsCredit": 6,
      "engineeringEcts": 3,
      "basicScienceEcts": 0,
      "contentEn": "This course covers data structures.",
      "contentTr": "Bu ders veri yapılarını kapsar.",
      "linkEn": "http://example.com/cs103",
      "linkTr": "http://example.com/cs103-tr",
      "faculty": "Engineering",
      "courseStatus": true
  }
- Expected Outputs:
  - HTTP 200 OK: "Course added successfully."
  - HTTP 400 Bad Request
  - HTTP 403 Forbidden: "You are not authorized to add a course." (NOT ADMIN)
  - HTTP 403 Forbidden

12. Update a Course (Admin Only)
- Session-Based: Yes
- Method + Link: PUT /api/courses/{courseId}
- Input:
  - courseId: The ID of the course to be updated.
  {
      "subject": "CS",
      "courseCode": "103",
      "courseNameEn": "Advanced Data Structures",
      "courseNameTr": "İleri Veri Yapıları",
      "suCredit": 4,
      "ectsCredit": 7,
      "engineeringEcts": 4,
      "basicScienceEcts": 0,
      "contentEn": "This course covers advanced data structures.",
      "contentTr": "Bu ders ileri veri yapılarını kapsar.",
      "linkEn": "http://example.com/cs103-advanced",
      "linkTr": "http://example.com/cs103-advanced-tr",
      "faculty": "Engineering",
      "courseStatus": true
  }
- Expected Outputs:
  - HTTP 200 OK: "Course updated successfully."
  - HTTP 403 Forbidden: "You are not authorized to update a course." (NOT ADMIN)
  - HTTP 404 Not Found: "Course not found with ID: {courseId}"
  - HTTP 403 Forbidden

---

Controller: CourseCommentController 13-16

13. Get All Comments for a Course
- Session-Based: Yes
- Method + Link: GET /api/course-comments/{courseId}
- Input:
  - courseId: The ID of the course for which comments are requested.
- Expected Outputs:
  - HTTP 200 OK:
    [
        {
            "commentId": 1,
            "userId": 9,
            "username": "erdemozcan",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": 202401,
            "gradeReceived": "A",
            "content": "This course is amazing!",
            "createdAt": "2025-05-14T16:16:03",
            "anonymous": false
        },
        {
            "commentId": 2,
            "userId": 9,
            "username": "erdemozcan",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "I agree!",
            "createdAt": "2025-05-14T16:21:01",
            "anonymous": false
        },
        {
            "commentId": 3,
            "userId": null,
            "username": null,
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "çok gizli mesaj",
            "createdAt": "2025-05-14T17:12:07",
            "anonymous": true
        },
        {
            "commentId": 4,
            "userId": 11,
            "username": "berkb",
            "courseId": 885,
            "parentCommentId": null,
            "termTaken": null,
            "gradeReceived": null,
            "content": "çok gizli mesaj 2",
            "createdAt": "2025-05-14T17:16:38",
            "anonymous": true
        }
    ]
  - HTTP 403 Forbidden
  - NOTE, IF NOT COURSEID NOT FOUND, RETURN EMPTY.

14. Add a Comment to a Course
- Session-Based: Yes
- Method + Link: POST /api/course-comments/{courseId}
- Input:
  - courseId: The ID of the course to which the comment will be added.
  ```json
  {
      "content": "This course is amazing!",
      "anonymous": false,
      "termTaken": 202401,
      "gradeReceived": "A",
      "parentCommentId": null
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment added successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found."

15. Update a Comment
- Session-Based: Yes
- Method + Link: PUT /api/course-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be updated.
  {
      "content": "This course is fantastic!",
      "anonymous": true,
      "termTaken": 202401,
      "gradeReceived": "A-"
  }
- Expected Outputs:
  - HTTP 200 OK: "Comment updated successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to update this comment."
  - HTTP 404 Not Found: "Comment not found."

16. Delete a Comment (Admin or Comment Owner Only)
- Session-Based: Yes
- Method + Link: DELETE /api/course-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be deleted.
- Expected Outputs:
  - HTTP 200 OK: "Comment deleted successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to delete this comment."
  - HTTP 404 Not Found: "Comment not found."

---

Controller: CourseCommentRatingController 17-20

17. Rate a Comment (Like or Dislike)
- Session-Based: Yes
- Method + Link: POST /api/course-comment-ratings/{commentId}/rate
- Input:
  - commentId: The ID of the comment to be rated.
  - isLike: A boolean indicating whether the comment is liked (`true`) or disliked (`false`).
  ```json
  {
      "isLike": true
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment rated successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Comment not found."

18. Get Comment Stats (Likes/Dislikes Count)
- Session-Based: Yes
- Method + Link: GET /api/course-comment-ratings/{commentId}/stats
- Input:
  - commentId: The ID of the comment for which the stats are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "likes": 10,
        "dislikes": 3
    }
    ```
  - HTTP 200 OK (if comment doesn't exist):
    ```json
    {
        "likes": 0,
        "dislikes": 0
    }
    ```
  - HTTP 403 Forbidden

19. Get User's Rating for a Comment
- Session-Based: Yes
- Method + Link: GET /api/course-comment-ratings/{commentId}/user-rating
- Input:
  - commentId: The ID of the comment for which the user's rating is requested.
- Expected Outputs:
  - HTTP 200 OK: `true` (if liked), `false` (if disliked), or `null` (if not rated)
  - HTTP 403 Forbidden

20. Remove Rating from a Comment
- Session-Based: Yes
- Method + Link: DELETE /api/course-comment-ratings/{commentId}/rate
- Input:
  - commentId: The ID of the comment for which the rating will be removed.
- Expected Outputs:
  - HTTP 200 OK: "Rating removed successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Rating not found"

---

Controller: CourseViewLogController 21-22

21. Log a Course Visit
- Session-Based: Yes
- Method + Link: POST /api/course-view-log/log
- Input:
  - courseId: The ID of the course being visited (as a query parameter).
  - Example: `/api/course-view-log/log?courseId=101`
- Expected Outputs:
  - HTTP 200 OK: "Course visit logged successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found"

22. Get Top Visited Courses
- Session-Based: Yes
- Method + Link: GET /api/course-view-log/top-visited
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        [
            101,  // courseId
            "CS",  // subject
            "101", // courseCode
            15     // visitCount
        ],
        [
            102,  // courseId
            "MATH", // subject
            "101",  // courseCode
            10     // visitCount
        ]
    ]
    ```
    (Returns at most 10 courses ordered by visit count)
  - HTTP 403 Forbidden

---

Controller: NoteController 23-26

23. Get All Notes for a Course
- Session-Based: Yes
- Method + Link: GET /api/notes/{courseId}
- Input:
  - courseId: The ID of the course for which notes are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "noteId": 1,
            "user": {
                "userId": 9,
                "username": "erdemozcan"
            },
            "course": {
                "courseId": 885,
                "subject": "CS",
                "courseCode": "101"
            },
            "termTaken": 202401,
            "instructorTaken": "Dr. John Smith",
            "description": "This is an important note about the midterm.",
            "createdAt": "2025-05-14T16:16:03",
            "cloudLink": "https://drive.google.com/file/d/12345abcde"
        },
        {
            "noteId": 2,
            "user": {
                "userId": 9,
                "username": "erdemozcan"
            },
            "course": {
                "courseId": 885,
                "subject": "CS",
                "courseCode": "101"
            },
            "termTaken": 202402,
            "instructorTaken": "Dr. Jane Doe",
            "description": "Remember to study chapter 5.",
            "createdAt": "2025-05-14T17:12:07",
            "cloudLink": "https://drive.google.com/file/d/67890fghij"
        }
    ]
    ```
  - HTTP 403 Forbidden

24. Add a Note
- Session-Based: Yes
- Method + Link: POST /api/notes/{courseId}
- Input:
  - courseId: The ID of the course to which the note will be added.
  ```json
  {
      "termTaken": 202401,
      "instructorTaken": "Dr. John Smith",
      "description": "This is a note about the course material.",
      "cloudLink": "https://drive.google.com/file/d/12345abcde"
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Note added successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Course not found."

25. Edit a Note
- Session-Based: Yes
- Method + Link: PUT /api/notes/{noteId}
- Input:
  - noteId: The ID of the note to be updated.
  ```json
  {
      "termTaken": 202402,
      "instructorTaken": "Dr. Jane Doe", 
      "description": "Updated note description.",
      "cloudLink": "https://drive.google.com/file/d/67890fghij"
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Note updated successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to edit this note."
  - HTTP 404 Not Found: "Note not found."

26. Delete a Note
- Session-Based: Yes
- Method + Link: DELETE /api/notes/{noteId}
- Input:
  - noteId: The ID of the note to be deleted.
- Expected Outputs:
  - HTTP 200 OK: "Note deleted successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to delete this note."
  - HTTP 404 Not Found: "Note not found."

---

Controller: InstructorController 27-30

27. Get All Instructors Names and IDs
- Session-Based: Yes
- Method + Link: GET /api/instructors/all
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "id": 1,
            "name": "John",
            "surname": "Smith"
        },
        {
            "id": 2,
            "name": "Jane",
            "surname": "Doe"
        }
    ]
    ```
  - HTTP 403 Forbidden

28. Get Instructor Details by ID
- Session-Based: Yes
- Method + Link: GET /api/instructors/{id}
- Input:
  - id: The ID of the instructor to retrieve.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "instructorId": 1,
        "name": "John",
        "surname": "Smith",
        "department": "Computer Science",
        "imageUrl": "https://example.com/profile.jpg",
        "aboutTr": "Bu öğretim üyesi hakkında Türkçe bilgiler.",
        "aboutEn": "Information about this instructor in English.",
        "linkTr": "https://example.com/tr/instructor/1",
        "linkEn": "https://example.com/en/instructor/1"
    }
    ```
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Instructor not found."

29. Add New Instructor (Admin Only)
- Session-Based: Yes
- Method + Link: POST /api/instructors/add
- Input:
  ```json
  {
      "name": "John",
      "surname": "Smith",
      "department": "Computer Science",
      "imageUrl": "https://example.com/profile.jpg",
      "aboutTr": "Bu öğretim üyesi hakkında Türkçe bilgiler.",
      "aboutEn": "Information about this instructor in English.",
      "linkTr": "https://example.com/tr/instructor/1",
      "linkEn": "https://example.com/en/instructor/1"
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Instructor added successfully."
  - HTTP 403 Forbidden: "You are not authorized to add an instructor."

30. Update Instructor (Admin Only)
- Session-Based: Yes
- Method + Link: PUT /api/instructors/{id}
- Input:
  - id: The ID of the instructor to update.
  ```json
  {
      "name": "John",
      "surname": "Smith",
      "department": "Mathematics",
      "imageUrl": "https://example.com/new_profile.jpg",
      "aboutTr": "Güncellenmiş Türkçe bilgiler.",
      "aboutEn": "Updated information in English.",
      "linkTr": "https://example.com/tr/instructor/updated",
      "linkEn": "https://example.com/en/instructor/updated"
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Instructor updated successfully."
  - HTTP 403 Forbidden: "You are not authorized to update an instructor."
  - HTTP 404 Not Found: "Instructor not found."

---

Controller: InstructorViewLogController 31-32

31. Log an Instructor Visit
- Session-Based: Yes
- Method + Link: POST /api/instructor-view-log/log
- Input:
  - instructorId: The ID of the instructor being visited (as a query parameter).
  - Example: `/api/instructor-view-log/log?instructorId=101`
- Expected Outputs:
  - HTTP 200 OK: "Instructor visit logged successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Instructor not found"

32. Get Top Visited Instructors
- Session-Based: Yes
- Method + Link: GET /api/instructor-view-log/top-visited
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        [
            101,   // instructorId
            "John", // name
            "Doe",  // surname
            "Computer Science", // department
            15     // visitCount
        ],
        [
            102,   // instructorId
            "Jane", // name
            "Smith", // surname
            "Mathematics", // department
            10     // visitCount
        ]
    ]
    ```
    (Returns at most 10 instructors ordered by visit count)
  - HTTP 403 Forbidden

---

Controller: InstructorCommentController 33-36

33. Get All Comments for an Instructor
- Session-Based: Yes
- Method + Link: GET /api/instructor-comments/{instructorId}
- Input:
  - instructorId: The ID of the instructor for which comments are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "commentId": 1,
            "userId": 9,
            "username": "erdemozcan",
            "instructorId": 3,
            "parentCommentId": null,
            "content": "This instructor is amazing!",
            "createdAt": "2025-05-14T16:16:03",
            "anonymous": false
        },
        {
            "commentId": 2,
            "userId": null,
            "username": null,
            "instructorId": 3,
            "parentCommentId": 1,
            "content": "Very knowledgeable in the subject.",
            "createdAt": "2025-05-14T17:12:07",
            "anonymous": true
        }
    ]
    ```
  - HTTP 403 Forbidden

34. Add a Comment to an Instructor
- Session-Based: Yes
- Method + Link: POST /api/instructor-comments/{instructorId}
- Input:
  - instructorId: The ID of the instructor to which the comment will be added.
  ```json
  {
      "content": "This instructor is amazing!",
      "anonymous": false,
      "parentCommentId": null
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment added successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Instructor not found"
  - HTTP 400 Bad Request: Error message details

35. Update a Comment
- Session-Based: Yes
- Method + Link: PUT /api/instructor-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be updated.
  ```json
  {
      "content": "This instructor is really great!",
      "anonymous": true
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment updated successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to edit this comment."
  - HTTP 404 Not Found: "Comment not found"
  - HTTP 400 Bad Request: Error message details

36. Delete a Comment (Admin or Comment Owner Only)
- Session-Based: Yes
- Method + Link: DELETE /api/instructor-comments/{commentId}
- Input:
  - commentId: The ID of the comment to be deleted.
- Expected Outputs:
  - HTTP 200 OK: "Comment deleted successfully."
  - HTTP 403 Forbidden
  - HTTP 403 Forbidden: "You are not authorized to delete this comment."
  - HTTP 404 Not Found: "Comment not found"
  - HTTP 400 Bad Request: Error message details

---

Controller: InstructorCommentRatingController 37-40

37. Rate a Comment (Like or Dislike)
- Session-Based: Yes
- Method + Link: POST /api/instructor-comment-ratings/{commentId}/rate
- Input:
  - commentId: The ID of the comment to be rated.
  - isLike: A boolean indicating whether the comment is liked (`true`) or disliked (`false`).
  ```json
  {
      "isLike": true
  }
  ```
- Expected Outputs:
  - HTTP 200 OK: "Comment rated successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Comment not found"
  - HTTP 400 Bad Request: "The 'isLike' field is required." or other error details

38. Get Comment Stats (Likes/Dislikes Count)
- Session-Based: Yes
- Method + Link: GET /api/instructor-comment-ratings/{commentId}/stats
- Input:
  - commentId: The ID of the comment for which the stats are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "likes": 10,
        "dislikes": 3
    }
    ```

39. Get User's Rating for a Comment
- Session-Based: Yes
- Method + Link: GET /api/instructor-comment-ratings/{commentId}/user-rating
- Input:
  - commentId: The ID of the comment for which the user's rating is requested.
- Expected Outputs:
  - HTTP 200 OK: `true` (if liked), `false` (if disliked), or `null` (if not rated)
  - HTTP 403 Forbidden

40. Remove Rating from a Comment
- Session-Based: Yes
- Method + Link: DELETE /api/instructor-comment-ratings/{commentId}/rate
- Input:
  - commentId: The ID of the comment for which the rating will be removed.
- Expected Outputs:
  - HTTP 200 OK: "Rating removed successfully."
  - HTTP 403 Forbidden
  - HTTP 404 Not Found: "Rating not found"
  - HTTP 400 Bad Request: Error message details

---

Controller: AdminController 41-42

41. Ban a User (Admin Only)
- Session-Based: Yes
- Method + Link: POST /api/admin/ban-user
- Input:
  - userId: The ID of the user to be banned (as a query parameter).
  - reason: The reason for the ban (as a query parameter).
  - Example: `/api/admin/ban-user?userId=123&reason=Inappropriate%20behavior`
- Expected Outputs:
  - HTTP 200 OK: "User banned successfully."
  - HTTP 403 Forbidden: "You are not authorized to ban a user."
  - HTTP 404 Not Found: "User not found with ID: {userId}"

42. Change Course Subject and Code (Admin Only)
- Session-Based: Yes
- Method + Link: POST /api/admin/change-course
- Input:
  - oldCourseId: The ID of the course to be changed (as a query parameter).
  - newCourseId: The ID of the new course (as a query parameter).
  - Example: `/api/admin/change-course?oldCourseId=101&newCourseId=102`
- Expected Outputs:
  - HTTP 200 OK: "Course changed successfully."
  - HTTP 403 Forbidden: "You are not authorized to change a course."
  - HTTP 404 Not Found: 
    - "Old course not found with ID: {oldCourseId}"
    - "New course not found with ID: {newCourseId}"

---

Controller: PrerequisiteController 43

43. Get Prerequisites for a Course
- Session-Based: Yes
- Method + Link: GET /api/prerequisites/{courseId}
- Input:
  - courseId: The ID of the course for which prerequisites are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "courseId": 101,
            "subject": "CS",
            "courseCode": "101",
            "isAnd": true
        },
        {
            "courseId": 102,
            "subject": "MATH",
            "courseCode": "101",
            "isAnd": false
        }
    ]
    ```
    or `null` if no prerequisites exist
  - HTTP 403 Forbidden

---

Controller: ProfileController 44-46

44. Get User Profile
- Session-Based: Yes
- Method + Link: GET /api/profile
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "name": "John",
        "surname": "Doe",
        "username": "john_doe",
        "email": "john.doe@sabanciuniv.edu",
        "major": "Computer Science",
        "minor": "Mathematics",
        "second_major": null,
        "start_term": 202101,
        "graduation_term": 202501,
        "is_2fa_enabled": false,
        "last_failed_attempt": null,
        "last_login": "2025-05-14T21:19:57"
    }
    ```
  - HTTP 403 Forbidden

45. Update Two-Factor Authentication Settings
- Session-Based: Yes
- Method + Link: PUT /api/profile/2fa
- Input:
  - is2faEnabled: Boolean value indicating whether to enable or disable 2FA (as a query parameter).
  - Example: `/api/profile/2fa?is2faEnabled=true`
- Expected Outputs:
  - HTTP 200 OK: "Two-factor authentication setting updated successfully."
  - HTTP 403 Forbidden: "You must be logged in to update 2FA settings."
  - HTTP 404 Not Found: "User not found"

46. Update User Profile
- Session-Based: Yes
- Method + Link: PUT /api/profile
- Input:
  ```json
  {
      "name": "John",
      "surname": "Smith",
      "major": "Computer Science and Engineering",
      "minor": "Business",
      "second_major": "Mathematics",
      "start_term": 202101,
      "graduation_term": 202501
  }
  ```
  (All fields are optional; only include fields to be updated)
- Expected Outputs:
  - HTTP 200 OK: "Profile updated successfully."
  - HTTP 403 Forbidden: "You must be logged in to update your profile."
  - HTTP 404 Not Found: "User not found"

---

Controller: StudentPlanController 47-49

47. Save a Student Plan
- Session-Based: Yes
- Method + Link: POST /api/student-plan/save
- Input:
  - courseId: The ID of the course to add to the student's plan (as a query parameter).
  - term: The term in which the student plans to take the course (as a query parameter, format: X).
  - Example: `/api/student-plan/save?courseId=101&term=1`
- Expected Outputs:
  - HTTP 200 OK: "Student plan saved successfully."
  - HTTP 403 Forbidden: "You must be logged in to save a plan."
  - HTTP 404 Not Found: 
    - "User not found with ID: {userId}"
    - "Course not found with ID: {courseId}"
  - HTTP 400 Bad Request: Other error messages

48. Get All Student Plans
- Session-Based: Yes
- Method + Link: GET /api/student-plan/all
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "planId": 1,
            "courseId": 101,
            "subject": "CS",
            "courseCode": "101",
            "term": 202401
        },
        {
            "planId": 2,
            "courseId": 102,
            "subject": "MATH",
            "courseCode": "101",
            "term": 202401
        }
    ]
    ```
  - HTTP 403 Forbidden

49. Delete All Student Plans
- Session-Based: Yes
- Method + Link: DELETE /api/student-plan/delete-all
- Input: None
- Expected Outputs:
  - HTTP 200 OK: "All student plans deleted successfully."
  - HTTP 403 Forbidden: "You must be logged in to delete plans."

---

Controller: ProgramController 50-52

50. Get All Unique Program Names
- Session-Based: Yes
- Method + Link: GET /api/programs/unique-names
- Input: None
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "name_en": "Computer Science and Engineering",
            "name_tr": "Bilgisayar Bilimi ve Mühendisliği"
        },
        {
            "name_en": "Industrial Engineering",
            "name_tr": "Endüstri Mühendisliği"
        }
    ]
    ```
  - HTTP 403 Forbidden: "You must be logged in to access this resource."

51. Get Program Details by Name and Admission Term
- Session-Based: Yes
- Method + Link: GET /api/programs/details
- Input:
  - nameEn: The English name of the program (as a query parameter).
  - admissionTerm: The admission term of the program (as a query parameter, format: YYYYMM).
  - Example: `/api/programs/details?nameEn=Computer%20Science%20and%20Engineering&admissionTerm=202101`
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    {
        "programId": 1,
        "nameEn": "Computer Science and Engineering",
        "nameTr": "Bilgisayar Bilimi ve Mühendisliği",
        "admissionTerm": 202101,
        "universityCredits": 128,
        "universityMinCourses": 40,
        "requiredCredits": 82,
        "requiredMinCourses": 25,
        "coreCredits": 15,
        "coreMinCourses": 5,
        "coreElectiveCreditsI": 9,
        "coreElectiveMinCoursesI": 3,
        "coreElectiveCreditsII": 6,
        "coreElectiveMinCoursesII": 2,
        "areaCredits": 12,
        "areaMinCourses": 4,
        "freeElectiveCredits": 9,
        "freeElectiveMinCourses": 3,
        "facultyCredits": 6,
        "facultyMinCourses": 2,
        "mathRequiredCredits": 12,
        "mathMinCourses": 4,
        "philosophyRequiredCredits": 3,
        "philosophyMinCourses": 1,
        "engineeringEcts": 90,
        "basicScienceEcts": 30
    }
    ```
  - HTTP 403 Forbidden: "You must be logged in to access this resource."
  - HTTP 404 Not Found: "Program not found with name: {nameEn} and admission term: {admissionTerm}"

52. Get Courses by Program ID
- Session-Based: Yes
- Method + Link: GET /api/programs/{programId}/courses
- Input:
  - programId: The ID of the program for which courses are requested.
- Expected Outputs:
  - HTTP 200 OK:
    ```json
    [
        {
            "courseId": "101",
            "courseGroup": "Required",
            "subject": "CS",
            "courseCode": "101"
        },
        {
            "courseId": "102",
            "courseGroup": "Core",
            "subject": "CS",
            "courseCode": "102"
        },
        {
            "courseId": "103",
            "courseGroup": "Elective",
            "subject": "MATH",
            "courseCode": "101"
        }
    ]
    ```
  - HTTP 403 Forbidden: "You must be logged in to access this resource."
  - HTTP 404 Not Found: "Program not found with ID: {programId}"

---

